{"version":3,"sources":["components/Header.jsx","components/TodoInput.jsx","components/TodoLists.jsx","components/forms/TextFieldComponent.jsx","components/forms/ButtonComponent.jsx","components/forms/DatePickerComponent.jsx","components/forms/SelectComponent.jsx","components/forms/RadioComponent.jsx","components/definedFunction.js","components/TodoList.jsx","components/TodoModal.jsx","App.jsx","index.js"],"names":["HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","useStyles","makeStyles","theme","title","flexGrow","Header","classes","todoSavedDispatch","useContext","TodoSavedContext","handleDarkModeOff","localStorage","setItem","setDarkMode","React","useState","anchorEl","setAnchorEl","AppBar","Toolbar","Typography","variant","className","darkMode","Tooltip","IconButton","color","onClick","size","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","transformOrigin","vertical","horizontal","MenuItem","disabled","type","console","log","grid","padding","spacing","alignItems","TodoInput","TodoTmpContext","todoTmpState","todoTmpDispatch","selectImportanceElements","GlobalContext","style","marginTop","Grid","container","item","xs","autoFocus","fullWidth","label","multiline","handleEnterPress","e","key","payload","value","tmpTodoText","setValue","sm","selectedDate","tmpDeadline","setSelectedDate","date","format","elements","helperText","selectValue","tmpImportanceIndex","setSelectValue","justify","icon","handleClick","a","TodoLists","todoSavedState","sortValue","setSortValue","filterValue","setFilterValue","todoListForDisplay","setTodoListForDisplay","checked","setChecked","searchValue","setSearchValue","sortRadioElements","useEffect","newDisplay","filter","todo","progressIndex","slice","sort","b","marginBottom","FormControlLabel","control","Switch","onChange","prev","Collapse","name","radioValue","setRadioValue","searchDisplay","todoText","includes","todoDetail","TextFieldComponent","TextField","margin","onKeyPress","rows","button","ButtonComponent","Button","startIcon","display","DatePickerComponent","utils","DateFnsUtils","autoOk","disableToolbar","KeyboardButtonProps","formControl","minWidth","selectEmpty","SelectComponent","FormControl","InputLabel","Select","labelId","map","element","index","text","toString","FormHelperText","RadioComponent","component","FormLabel","RadioGroup","row","aria-label","Radio","lookUp","obj","returnKey","demo","backgroundColor","palette","background","paper","TodoList","globalContextValue","delateId","setDelateId","handleClose","today","Date","tomorrow","setDate","getDate","List","dense","ListItem","ListItemIcon","deadline","ListItemText","whiteSpace","primary","secondary","importanceIndex","selectProgressElements","completeDate","updateDate","createdDate","join","md","length","Box","Divider","root","TodoModal","globalValue","isNew","tmpId","Dialog","aria-labelledby","DialogTitle","DialogContent","tmpTodoDetail","isEdit","tmpProgressIndex","tmpUpdateDate","tmpCreatedDate","DialogActions","divider","createContext","todoSavedInitialState","JSON","parse","getItem","newTodoSavedState","todoSavedReducer","todoSavedAction","newId","Math","max","tmpCompleteDate","updateTodo","updateIndex","findIndex","splice","doneIndex","stringify","restoreIndex","deleteIndex","DefaultTodoData","todoTmpInitialState","isModalOpen","todoTmpReducer","todoTmpAction","App","useReducer","createMuiTheme","lightBlue","main","pink","warning","alert","hasOwnProperty","clear","ThemeProvider","CssBaseline","Provider","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.766ec8c0.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { TodoSavedContext } from \"../App\";\r\n\r\n// material-ui関連のインポート\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n//ヘッダーをスライドで隠す\r\nfunction HideOnScroll(props) {\r\n  const { children, window } = props;\r\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n\r\n  return (\r\n    <Slide appear={false} direction=\"down\" in={!trigger}>\r\n      {children}\r\n    </Slide>\r\n  );\r\n}\r\n\r\n//スイッチボタンを右に配置///////////////////////\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n\r\n  // const { todoSavedDispatch } = useContext(TodoSavedContext);\r\n  const { todoSavedDispatch } = useContext(TodoSavedContext);\r\n\r\n  // ダークモードのOnOff\r\n  const handleDarkModeOn = () => {\r\n    localStorage.setItem(\"darkMode\", \"on\");\r\n    props.setDarkMode(true);\r\n  };\r\n  const handleDarkModeOff = () => {\r\n    localStorage.setItem(\"darkMode\", \"off\");\r\n    props.setDarkMode(false);\r\n  };\r\n\r\n  // 設定メニューボタンの設定\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handleSetting = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const handleGet = () => {\r\n    todoSavedDispatch({ type: \"getDefault\" });\r\n    setAnchorEl(null);\r\n  };\r\n  const handleClear = () => {\r\n    todoSavedDispatch({ type: \"clear\" });\r\n    setAnchorEl(null);\r\n  };\r\n  const handleLocalDelete = () => {\r\n    handleDarkModeOff();\r\n    todoSavedDispatch({ type: \"localDelete\" });\r\n    setAnchorEl(null);\r\n\r\n    // localStorage.clear();\r\n  };\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN /////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <HideOnScroll {...props}>\r\n        <AppBar>\r\n          <Toolbar>\r\n            <ListAltIcon />\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              TodoList\r\n            </Typography>\r\n            {props.darkMode ? (\r\n              <Tooltip title=\"ライトモードへ\">\r\n                <IconButton color=\"inherit\" onClick={handleDarkModeOff}>\r\n                  <Brightness7Icon size=\"large\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            ) : (\r\n              <Tooltip title=\"ダークモードへ\">\r\n                <IconButton color=\"inherit\" onClick={handleDarkModeOn}>\r\n                  <Brightness4Icon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            )}\r\n            <Tooltip title=\"設定\">\r\n              <IconButton color=\"inherit\" onClick={handleSetting}>\r\n                <SettingsIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n              id=\"simple-menu\"\r\n              anchorEl={anchorEl}\r\n              keepMounted\r\n              open={Boolean(anchorEl)}\r\n              onClose={handleClose}\r\n              // anchorOrigin={{\r\n              //   horizontal: \"right\",\r\n              // }}\r\n              transformOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"right\",\r\n              }}\r\n            >\r\n              <MenuItem disabled={true}>\r\n                (注)現在のデータは全削除されます\r\n              </MenuItem>\r\n              <MenuItem onClick={handleGet}>\r\n                デフォルトデータを取り込む\r\n              </MenuItem>\r\n              <MenuItem onClick={handleClear}>全データ削除</MenuItem>\r\n              <MenuItem onClick={handleLocalDelete}>\r\n                ローカルストレージをクリア\r\n              </MenuItem>\r\n            </Menu>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </HideOnScroll>\r\n      <Toolbar /> {/* これが無いと次のコンテンツが下にもぐる */}\r\n      {console.log(\"レンダー： header.jsx\")}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useContext } from \"react\";\r\n// contextをインポート\r\nimport { TodoSavedContext, TodoTmpContext, GlobalContext } from \"../App\";\r\n// コンポーネントをインポート\r\nimport {\r\n  ButtonComponent,\r\n  DatePickerComponent,\r\n  TextFieldComponent,\r\n  SelectComponent,\r\n} from \"./entryIndex\";\r\n\r\n// material-ui関連のインポート\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// buttonコンポーネントに渡すアイコンをインポート\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\n// date-fnsをインポート\r\nimport { format } from \"date-fns\";\r\n\r\n// ////////////////////////////////////////////////////\r\n// material-uiの設定\r\nconst useStyles = makeStyles((theme) => ({\r\n  grid: {\r\n    padding: theme.spacing(2),\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst TodoInput = () => {\r\n  const classes = useStyles();\r\n\r\n  // Contextの値を取得\r\n  const { todoSavedDispatch } = useContext(TodoSavedContext);\r\n  const { todoTmpState, todoTmpDispatch } = useContext(TodoTmpContext);\r\n  const { selectImportanceElements } = useContext(GlobalContext);\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN /////////////////////////////////////////////\r\n  return (\r\n    <div style={{ marginTop: \"10px\" }}>\r\n      <Grid container className={classes.grid}>\r\n        <Grid item xs={12}>\r\n          <TextFieldComponent\r\n            autoFocus={true}\r\n            fullWidth={true}\r\n            label={\"Todoを入力\"}\r\n            multiline={true}\r\n            variant={\"outlined\"}\r\n            // Enterで追加を行う\r\n            handleEnterPress={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                todoSavedDispatch({\r\n                  type: \"addTodo\",\r\n                  payload: todoTmpState,\r\n                });\r\n              }\r\n            }}\r\n            //\r\n            value={todoTmpState.tmpTodoText}\r\n            setValue={(e) => {\r\n              todoTmpDispatch({\r\n                type: \"handleChange\",\r\n                payload: { key: \"tmpTodoText\", value: e.target.value },\r\n              });\r\n              // console.log(JSON.stringify(todoTmpState));\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6} sm>\r\n          <DatePickerComponent\r\n            label={\"完了期日\"}\r\n            //\r\n            selectedDate={todoTmpState.tmpDeadline}\r\n            setSelectedDate={(date) => {\r\n              todoTmpDispatch({\r\n                type: \"handleChange\",\r\n                payload: {\r\n                  key: \"tmpDeadline\",\r\n                  value: format(date, \"yyyy-MM-dd\"),\r\n                },\r\n              });\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6} sm>\r\n          <SelectComponent\r\n            elements={selectImportanceElements}\r\n            helperText={\"重要度：高5→低1\"}\r\n            label={\"重要度\"}\r\n            //\r\n            selectValue={todoTmpState.tmpImportanceIndex}\r\n            setSelectValue={(e) => {\r\n              todoTmpDispatch({\r\n                type: \"handleChange\",\r\n                payload: { key: \"tmpImportanceIndex\", value: e.target.value },\r\n              });\r\n              // console.log(JSON.stringify(todoTmpState));\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <ButtonComponent\r\n                color=\"primary\"\r\n                icon={<PlaylistAddIcon />}\r\n                title=\"ToDo追加\"\r\n                //\r\n                handleClick={async () => {\r\n                  todoSavedDispatch({\r\n                    type: \"addUpdate\",\r\n                    payload: todoTmpState,\r\n                  });\r\n                  await todoTmpDispatch({\r\n                    type: \"reset\",\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <ButtonComponent\r\n                icon={<DescriptionIcon />}\r\n                title={\"詳細入力\"}\r\n                //\r\n                handleClick={() => {\r\n                  todoTmpDispatch({\r\n                    type: \"new\",\r\n                    // payload: todoTmpState,\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      {console.log(\"render TodoInput.jsx\")}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport {\r\n  RadioComponent,\r\n  TodoList,\r\n  TextFieldComponent,\r\n  ButtonComponent,\r\n} from \"./entryIndex\";\r\n\r\n// TodoStateContextをインポート\r\nimport { TodoSavedContext } from \"../App\";\r\n\r\n// material-ui関連のインポート\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n// import Paper from \"@material-ui/core/Paper\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst TodoLists = () => {\r\n  const { todoSavedState } = useContext(TodoSavedContext);\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // 表示の状態（filter,sort）を管理するstate どちらかを変更した時、もう一方も参照して表示用のTodo一覧を作成するため\r\n  const [sortValue, setSortValue] = useState(\"id\");\r\n  const [filterValue, setFilterValue] = useState(\"incomplete\");\r\n  // 画面表示用のtodoリストを作成・state管理 変更毎に再描画するため\r\n  const [todoListForDisplay, setTodoListForDisplay] = useState(todoSavedState);\r\n  // トランジションの切り替えに利用\r\n  const [checked, setChecked] = useState(false);\r\n  // 検索の値を格納\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  const handleChange = () => {\r\n    setChecked((prev) => !prev);\r\n  };\r\n  // ////////////////////////////////////////////////////\r\n  // radioボタン項目（ソート）\r\n  const sortRadioElements = [\r\n    { value: \"id\", label: \"登録順\" },\r\n    { value: \"deadline\", label: \"期日順\" },\r\n    { value: \"importanceIndex\", label: \"重要度順\" },\r\n    {\r\n      value: \"updateDate\",\r\n      label: \"更新日順\",\r\n      disabled: filterValue === \"complete\", // 完了選択時disabled\r\n    },\r\n    {\r\n      value: \"completeDate\",\r\n      label: \"完了日順\",\r\n      disabled: filterValue === \"incomplete\" || filterValue === null, // 未完了選択時および検索時（nul）disabled\r\n    },\r\n  ];\r\n\r\n  // radioボタン項目（表示区分）\r\n  const doneRadioElements = [\r\n    { value: \"incomplete\", label: \"未完了\", color: \"secondary\" },\r\n    { value: \"complete\", label: \"完了\" },\r\n  ];\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // 初回およびstate(filterValue、sortValue、todoState（Todoデータ本体）)が変更された場合にstate(todoListForDisplay)を更新する。\r\n\r\n  useEffect(() => {\r\n    // 更新日順を選択している状態で完了表示とした場合、および完了日順を選択している状態で未完了表示とした場合ソートを登録順(id)とする。\r\n    if (filterValue === \"complete\" && sortValue === \"updateDate\")\r\n      setSortValue(\"id\");\r\n    if (filterValue === \"incomplete\" && sortValue === \"completeDate\")\r\n      setSortValue(\"id\");\r\n\r\n    // filterValueおよびsortValueが共にnullの時（検索実行時）は何もしない。\r\n    if (filterValue === null && sortValue === null) {\r\n      return;\r\n    } else if (todoSavedState === null) {\r\n      setTodoListForDisplay([]);\r\n      return;\r\n    } else {\r\n      // filterValue、sortValueどちらかがnullの時（検索の直後）はnullの方に値をいれて実行。\r\n      filterValue === null && setFilterValue(\"incomplete\");\r\n      sortValue === null && setSortValue(\"id\");\r\n      // 検索値クリア\r\n      setSearchValue(\"\");\r\n\r\n      // 実行時の選択状態でfilter→sortを行う。\r\n      const newDisplay = [...todoSavedState]\r\n        .filter((todo) => {\r\n          return filterValue === \"incomplete\"\r\n            ? todo.progressIndex !== 4\r\n            : todo.progressIndex === 4;\r\n        })\r\n        .slice()\r\n        .sort((a, b) => {\r\n          if (a[sortValue] < b[sortValue]) {\r\n            return 1;\r\n          } else {\r\n            return -1;\r\n          }\r\n        });\r\n\r\n      setTodoListForDisplay(newDisplay);\r\n    }\r\n    console.log(\"TodoLists.jsx useEffect（todoListForDisplay作成）\");\r\n  }, [sortValue, filterValue, todoSavedState]);\r\n  // ↑第二引数を指定しないとuseEffectが無限ループになっている。\r\n\r\n  // 確認用console.log\r\n  useEffect(() => {\r\n    // console.log(\r\n    //   \"保存リストが変わったよ\" + JSON.stringify(todoSavedState, null, 2)\r\n    // );\r\n    console.log(\"保存リストが変わったよ!\");\r\n  }, [todoSavedState]);\r\n\r\n  useEffect(() => {\r\n    // console.log(\r\n    //   \"表示用リストが変わったよ\" + JSON.stringify(todoListForDisplay, null, 2)\r\n    // );\r\n    console.log(\"表示用リストが変わったよ\");\r\n  }, [todoListForDisplay]);\r\n\r\n  const doSearch = () => {\r\n    const searchDisplay = todoSavedState.filter((todo) => {\r\n      return (\r\n        todo.todoText.includes(searchValue) ||\r\n        todo.todoDetail.includes(searchValue)\r\n      );\r\n    });\r\n    setSortValue(null);\r\n    setFilterValue(null);\r\n    setTodoListForDisplay(searchDisplay);\r\n  };\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN\r\n  return (\r\n    <>\r\n      <Grid container spacing={2} style={{ marginBottom: \"4px\" }}>\r\n        <Grid item xs={12}>\r\n          <Grid container spacing={3} alignItems=\"center\">\r\n            <Grid item>\r\n              <h2>TODO一覧</h2>\r\n            </Grid>\r\n            <Grid item>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={checked}\r\n                    onChange={handleChange}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"表示条件\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Collapse in={checked}>\r\n          <Grid container spacing={1} alignItems=\"center\">\r\n            <Grid item>\r\n              <RadioComponent\r\n                title={\"ソート（すべて降順）\"}\r\n                name={\"sortRadioGroup\"}\r\n                elements={sortRadioElements}\r\n                radioValue={sortValue}\r\n                setRadioValue={setSortValue}\r\n              />\r\n              {/* {console.log(\"render:TodoLists.jsx RadioComponent(ソート)\")} */}\r\n            </Grid>\r\n            <Grid item>\r\n              <RadioComponent\r\n                title={\"表示切替\"}\r\n                name={\"FilterRadioGroup\"}\r\n                elements={doneRadioElements}\r\n                radioValue={filterValue}\r\n                setRadioValue={setFilterValue}\r\n              />\r\n              {/* {console.log(\"render:TodoLists.jsx RadioComponent(表示切替)\")} */}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Grid container spacing={1} alignItems=\"center\">\r\n                <Grid item xs={8}>\r\n                  <TextFieldComponent\r\n                    fullWidth={true}\r\n                    label={\"Search todos…\"}\r\n                    variant={\"outlined\"}\r\n                    //\r\n                    value={searchValue}\r\n                    setValue={(e) => setSearchValue(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <ButtonComponent\r\n                    color=\"default\"\r\n                    icon={<SearchIcon />}\r\n                    size=\"small\"\r\n                    title=\"検索\"\r\n                    //\r\n                    handleClick={doSearch}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Collapse>\r\n      </Grid>\r\n      <TodoList\r\n        filterValue={filterValue} // 表示区分によってボタンの表示を切り替える\r\n        todoListForDisplay={todoListForDisplay} // 画面表示用Todoリスト\r\n      />\r\n      {console.log(\"render:TodoLists.jsx\")}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoLists;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst TextFieldComponent = (props) => {\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN /////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <TextField\r\n        autoFocus={props.autoFocus}\r\n        disabled={props.disabled}\r\n        id=\"textInput\"\r\n        fullWidth={props.fullWidth}\r\n        label={props.label}\r\n        margin=\"dense\"\r\n        multiline={props.multiline}\r\n        onKeyPress={props.handleEnterPress}\r\n        rows={props.rows}\r\n        variant={props.variant}\r\n        //\r\n        value={props.value}\r\n        onChange={props.setValue}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextFieldComponent;\r\n","import React from \"react\";\r\n\r\n// material-ui関連のインポート\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// material-uiの設定\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst ButtonComponent = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      {/* 指定しないpropsはdefault値となる。iconは非表示となる。 */}\r\n      <Button\r\n        className={classes.button}\r\n        color={props.color}\r\n        size={props.size}\r\n        startIcon={props.icon}\r\n        style={{ display: props.display }}\r\n        variant=\"contained\"\r\n        onClick={props.handleClick}\r\n      >\r\n        {props.title}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import React from \"react\";\r\n\r\n// material-ui、日付ピッカー関連のインポート\r\nimport \"date-fns\";\r\nimport DateFnsUtils from \"@date-io/date-fns\"; // v1.3.13\r\n// import { format } from \"date-fns\"; // 追加\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst DatePickerComponent = (props) => {\r\n  // const handleDateChange = (date) => {\r\n  //   if (props.isEdit === true) {\r\n  //     props.setSelectedDate({\r\n  //       ...props.editDetailTodo,\r\n  //       deadline: format(date, \"yyyy-MM-dd\"),\r\n  //     });\r\n  //   } else {\r\n  //     props.setSelectedDate(format(date, \"yyyy-MM-dd\"));\r\n  //   }\r\n  // };\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN /////////////////////////////////////////////\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <KeyboardDatePicker\r\n        autoOk={true} // 日付を選択したらポップアップを消去\r\n        disabled={props.disabled}\r\n        disableToolbar\r\n        format=\"yyyy/MM/dd\"\r\n        id=\"datePicker\"\r\n        KeyboardButtonProps={{\r\n          \"aria-label\": \"change date\",\r\n        }}\r\n        label={props.label}\r\n        margin=\"normal\"\r\n        variant=\"inline\"\r\n        //\r\n        value={props.selectedDate}\r\n        onChange={props.setSelectedDate}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\n\r\nexport default DatePickerComponent;\r\n","import React from \"react\";\r\n\r\n// material-ui関連のインポート\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\n// material-uiの設定\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst SelectComponent = (props) => {\r\n  const classes = useStyles();\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN /////////////////////////////////////////////\r\n  return (\r\n    <div>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"select-label\">{props.label}</InputLabel>\r\n        <Select\r\n          labelId=\"select-label\"\r\n          id=\"select-helper\"\r\n          //\r\n          value={props.selectValue}\r\n          onChange={props.setSelectValue}\r\n        >\r\n          {/* **** ここからmap **** */}\r\n          {props.elements.map((element, index) => {\r\n            return (\r\n              <MenuItem value={element.index} key={index.toString()}>\r\n                {element.text}\r\n              </MenuItem>\r\n            );\r\n          })}\r\n          {/* **** ここまでmap **** */}\r\n        </Select>\r\n        <FormHelperText>{props.helperText}</FormHelperText>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectComponent;\r\n","import React from \"react\";\r\n\r\n// material-ui関連のインポート\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\nconst RadioComponent = (props) => {\r\n  const handleChange = (e) => {\r\n    props.setRadioValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">{props.title}</FormLabel>\r\n      <RadioGroup\r\n        row\r\n        aria-label={props.name}\r\n        name={props.name}\r\n        value={props.radioValue}\r\n        onChange={handleChange}\r\n      >\r\n        {props.elements.map((element, index) => {\r\n          return (\r\n            <FormControlLabel\r\n              key={index.toString()}\r\n              value={element.value}\r\n              control={<Radio color={element.color || \"primary\"} />}\r\n              label={element.label}\r\n              disabled={element.disabled}\r\n            />\r\n          );\r\n        })}\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default RadioComponent;\r\n","// //////////////////////////////////////////////////\r\n// ユーザー定義関数を作成 ///////////////////////////\r\n\r\n// //////////////////////////////////////////////////\r\n// 連想配列データ（obj）から、keyの値がvalueであるデータのreturnKeyの値を返す\r\n\r\nexport const lookUp = (obj, key, value, returnKey) => {\r\n  const returnValue = obj.filter((item) => item[key] === value)[0][returnKey];\r\n  return returnValue;\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport { ButtonComponent } from \"./entryIndex\";\r\n// Contextをインポート\r\nimport { TodoTmpContext, TodoSavedContext, GlobalContext } from \"../App\";\r\n// 独自関数をインポート\r\nimport { lookUp } from \"./definedFunction\";\r\n\r\n// material-ui関連のインポート\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport WorkIcon from \"@material-ui/icons/Work\";\r\nimport PlaylistAddCheckIcon from \"@material-ui/icons/PlaylistAddCheck\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport RestoreIcon from \"@material-ui/icons/Restore\";\r\n// import Button from \"@material-ui/core/Button\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { format } from \"date-fns\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  icon: {\r\n    color: \"#f6685e\",\r\n  },\r\n}));\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst TodoList = (props) => {\r\n  const classes = useStyles();\r\n  const { todoTmpDispatch } = useContext(TodoTmpContext);\r\n  const { todoSavedDispatch } = useContext(TodoSavedContext);\r\n  const globalContextValue = useContext(GlobalContext);\r\n\r\n  // Confirm用メニュー表示のためのStateおよび関数\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  // Confirm用メニューにmapのtodoデータ（削除対象のID）が引き継がれなかったため設定\r\n  const [delateId, setDelateId] = useState(null);\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  //明日（完了期日が明日以前のTODOを判定するため取得。アイコンの色を赤に）\r\n  const today = new Date();\r\n  const tomorrow = format(today.setDate(today.getDate() + 1), \"yyyy-MM-dd\");\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN /////////////////////////////////////////////\r\n  return (\r\n    <div className={classes.demo}>\r\n      <List dense={true}>\r\n        {/* **** ここからmap **** */}\r\n        {(props.todoListForDisplay || []).map((todo, index) => {\r\n          return (\r\n            <ListItem key={index.toString()}>\r\n              <Grid container>\r\n                <Grid item xs={0}>\r\n                  <Grid container>\r\n                    <Grid item>\r\n                      <ListItemIcon>\r\n                        <WorkIcon\r\n                          className={\r\n                            todo.progressIndex !== 4 &&\r\n                            todo.deadline <= tomorrow\r\n                              ? classes.icon\r\n                              : \"\"\r\n                          }\r\n                        />\r\n                      </ListItemIcon>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                      <ListItemText\r\n                        style={{ whiteSpace: \"pre-line\" }} // 改行を有効にする\r\n                        primary={todo.todoText}\r\n                        secondary={[\r\n                          todo.todoDetail !== \"\" ? `${todo.todoDetail}\\n` : \"\",\r\n                          `(`,\r\n                          `完了期日：${todo.deadline}`,\r\n                          `重要度：${lookUp(\r\n                            globalContextValue.selectImportanceElements,\r\n                            \"index\",\r\n                            todo.importanceIndex,\r\n                            \"text\"\r\n                          )}`,\r\n                          `進捗：${lookUp(\r\n                            globalContextValue.selectProgressElements,\r\n                            \"index\",\r\n                            todo.progressIndex,\r\n                            \"text\"\r\n                          )}`,\r\n                          `ID：${todo.id}`,\r\n                          `\\n`,\r\n                          props.filterValue === \"complete\"\r\n                            ? `完了日：${todo.completeDate}`\r\n                            : \"\",\r\n                          props.filterValue !== \"complete\"\r\n                            ? `更新日：${todo.updateDate}`\r\n                            : \"\",\r\n                          `作成日：${todo.createdDate}`,\r\n                          `)`,\r\n                        ].join(\"　\")}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} md>\r\n                  <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                      <ButtonComponent\r\n                        color=\"primary\"\r\n                        display={todo.progressIndex === 4 ? \"none\" : \"\"}\r\n                        icon={<PlaylistAddCheckIcon />}\r\n                        size=\"small\"\r\n                        title=\"完了\"\r\n                        //\r\n                        handleClick={() => {\r\n                          todoSavedDispatch({\r\n                            type: \"doneTodo\",\r\n                            payload: todo.id,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <ButtonComponent\r\n                        color=\"default\"\r\n                        display={todo.progressIndex === 4 ? \"none\" : \"\"}\r\n                        icon={<EditIcon />}\r\n                        size=\"small\"\r\n                        title=\"編集\"\r\n                        //\r\n                        handleClick={() => {\r\n                          todoTmpDispatch({\r\n                            type: \"edit\",\r\n                            payload: todo,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <ButtonComponent\r\n                        color=\"secondary\"\r\n                        display={todo.progressIndex === 4 ? \"none\" : \"\"}\r\n                        icon={<DeleteIcon />}\r\n                        size=\"small\"\r\n                        title=\"削除\"\r\n                        //\r\n\r\n                        handleClick={(event) => {\r\n                          setDelateId(todo.id);\r\n                          setAnchorEl(event.currentTarget);\r\n                        }}\r\n                      />\r\n                      <Menu\r\n                        id=\"simple-menu\"\r\n                        anchorEl={anchorEl}\r\n                        keepMounted\r\n                        open={Boolean(anchorEl)}\r\n                        onClose={handleClose}\r\n                      >\r\n                        <MenuItem onClick={handleClose}>キャンセル</MenuItem>\r\n                        <MenuItem\r\n                          onClick={() => {\r\n                            todoSavedDispatch({\r\n                              type: \"deleteTodo\",\r\n                              payload: delateId,\r\n                            });\r\n                            // console.log(JSON.stringify(todo, null, 2));\r\n                            handleClose();\r\n                          }}\r\n                        >\r\n                          削除する!\r\n                        </MenuItem>\r\n                      </Menu>\r\n                    </Grid>\r\n                    {/* 表示区分が未完了の場合のみ表示 */}\r\n                    <Grid item>\r\n                      <ButtonComponent\r\n                        color=\"secondary\"\r\n                        display={todo.progressIndex === 4 ? \"\" : \"none\"}\r\n                        icon={<RestoreIcon />}\r\n                        size=\"small\"\r\n                        title=\"進行中に戻す\"\r\n                        //\r\n                        handleClick={() => {\r\n                          todoSavedDispatch({\r\n                            type: \"restoreTodo\",\r\n                            payload: todo.id,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>{\" \"}\r\n                  {/* Grid container */}\r\n                </Grid>\r\n                {/* 最後のtodoの下には区切り線を表示しない */}\r\n                {index < props.todoListForDisplay.length - 1 && (\r\n                  <Grid item xs={12}>\r\n                    {/* 画面幅sm(600px)以上の場合は区切り線を表示 */}\r\n                    <Box display={{ xs: \"none\", sm: \"block\" }}>\r\n                      <Divider variant=\"middle\" />\r\n                    </Box>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </ListItem>\r\n          );\r\n        })}\r\n        {/* **** ここまでmap **** */}\r\n      </List>\r\n      {console.log(\"render: TodoList.jsx（詳細データ）\")}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  TodoSavedContext,\r\n  TodoTmpContext,\r\n  // TodoModalContext,\r\n  GlobalContext,\r\n} from \"../App\";\r\nimport {\r\n  TextFieldComponent,\r\n  ButtonComponent,\r\n  DatePickerComponent,\r\n  SelectComponent,\r\n} from \"./entryIndex\";\r\n// import lookUp from \"./definedFunction\";\r\n\r\n// material-ui関連のインポート\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n// import DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\r\nimport CancelPresentationIcon from \"@material-ui/icons/CancelPresentation\";\r\n\r\nimport { format } from \"date-fns\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst TodoModal = (props) => {\r\n  // TodoTmpContextを変数に代入\r\n  const { todoTmpState, todoTmpDispatch } = useContext(TodoTmpContext);\r\n  const { todoSavedDispatch } = useContext(TodoSavedContext);\r\n  const globalValue = useContext(GlobalContext);\r\n\r\n  // 編集用のstateを設定(初期値は新規入力時)\r\n  // const [editId, setEditId] = useState(null);\r\n  // const [editTodoText, setEditTodoText] = useState(\"\");\r\n  // const [editTodoDetail, setEditTodoDetail] = useState(\"\");\r\n  // const [editImportanceIndex, setEditImportanceIndex] = useState(null);\r\n  // const [editProgressIndex, setEditProgressIndex] = useState(null);\r\n  // const [editCreatedDate, setEditCreatedDate] = useState(null);\r\n  // const [editUpdateDate, setEditUpdateDate] = useState(null);\r\n\r\n  const classes = useStyles();\r\n\r\n  // 新規入力（詳細）か編集かを判定\r\n  const isNew = todoTmpState.tmpId === null;\r\n\r\n  // const handleClose = () => {\r\n  //   todoTmpDispatch({\r\n  //     type: \"cancel\",\r\n  //   });\r\n  // };\r\n\r\n  // const handleDone = () => {\r\n  //   todoTmpDispatch({\r\n  //     type: \"done\",\r\n  //     // payload: todoTmpState,\r\n  //   });\r\n  // };\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN /////////////////////////////////////////////\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={true} // 本来このプロパティで表示・非表示を制御できるが、非表示時の描画を無くせるためApp.jsx側で制御した\r\n        // onClose={handleClose} // ダイアログ外クリックで非表示はしない\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Todo詳細</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={4}>\r\n              <TextFieldComponent\r\n                disabled={true}\r\n                label={isNew ? \"ID(自動)\" : \"ID\"}\r\n                value={todoTmpState.tmpId}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextFieldComponent\r\n                fullWidth={true}\r\n                label=\"Todo\"\r\n                multiline={true}\r\n                variant={\"outlined\"}\r\n                //\r\n                value={todoTmpState.tmpTodoText}\r\n                setValue={(e) => {\r\n                  todoTmpDispatch({\r\n                    type: \"handleChange\",\r\n                    payload: { key: \"tmpTodoText\", value: e.target.value },\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextFieldComponent\r\n                fullWidth\r\n                label=\"Todo詳細\"\r\n                multiline={true}\r\n                rows={2}\r\n                variant={\"outlined\"}\r\n                //\r\n                value={todoTmpState.tmpTodoDetail}\r\n                setValue={(e) => {\r\n                  todoTmpDispatch({\r\n                    type: \"handleChange\",\r\n                    payload: { key: \"tmpTodoDetail\", value: e.target.value },\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <DatePickerComponent\r\n                isEdit={props.isEdit}\r\n                label={\"完了期日\"}\r\n                //\r\n                selectedDate={todoTmpState.tmpDeadline}\r\n                setSelectedDate={(date) => {\r\n                  todoTmpDispatch({\r\n                    type: \"handleChange\",\r\n                    payload: {\r\n                      key: \"tmpDeadline\",\r\n                      value: format(date, \"yyyy-MM-dd\"),\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <SelectComponent\r\n                elements={globalValue.selectImportanceElements}\r\n                helperText={\"重要度：高5→低1\"}\r\n                label={\"重要度\"}\r\n                //\r\n                selectValue={todoTmpState.tmpImportanceIndex}\r\n                setSelectValue={(e) => {\r\n                  todoTmpDispatch({\r\n                    type: \"handleChange\",\r\n                    payload: {\r\n                      key: \"tmpImportanceIndex\",\r\n                      value: e.target.value,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <SelectComponent\r\n                // 選択に完了を表示しない\r\n                elements={globalValue.selectProgressElements.filter(\r\n                  (element) => element.text !== \"完了\"\r\n                )}\r\n                helperText={\"完了は元画面のボタンをクリック\"}\r\n                label={\"進捗\"}\r\n                //\r\n                selectValue={todoTmpState.tmpProgressIndex}\r\n                setSelectValue={(e) => {\r\n                  todoTmpDispatch({\r\n                    type: \"handleChange\",\r\n                    payload: {\r\n                      key: \"tmpProgressIndex\",\r\n                      value: e.target.value,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextFieldComponent\r\n                disabled={true}\r\n                label={\"更新日（自動）\"}\r\n                value={todoTmpState.tmpUpdateDate}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextFieldComponent\r\n                disabled={true}\r\n                label={\"作成日（自動）\"}\r\n                value={todoTmpState.tmpCreatedDate}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {/* <Button onClick={handleClose}>キャンセル</Button>\r\n          <Button color=\"primary\" onClick={handleDone}>\r\n            確定する\r\n          </Button> */}\r\n          <ButtonComponent\r\n            icon={<CancelPresentationIcon />}\r\n            size=\"small\"\r\n            title=\"キャンセル\"\r\n            //\r\n            handleClick={() => {\r\n              todoTmpDispatch({\r\n                type: \"cancel\",\r\n              });\r\n            }}\r\n          />\r\n          <ButtonComponent\r\n            color=\"primary\"\r\n            icon={<CheckCircleOutlineIcon />}\r\n            size=\"small\"\r\n            title=\"確定する\"\r\n            //\r\n            handleClick={async () => {\r\n              todoSavedDispatch({\r\n                type: \"addUpdate\",\r\n                payload: todoTmpState,\r\n              });\r\n              await todoTmpDispatch({\r\n                type: \"reset\",\r\n              });\r\n            }}\r\n          />\r\n        </DialogActions>\r\n      </Dialog>\r\n      {console.log(\"render: TodoModal.jsx\")}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoModal;\r\n","import React, { useState, createContext, useReducer, useEffect } from \"react\";\r\n// 各コンポーネントのインポート\r\nimport {\r\n  Header,\r\n  TodoInput,\r\n  TodoLists,\r\n  TodoModal,\r\n} from \"./components/entryIndex\";\r\n// デフォルトtodoデータ（JSON）のインポート\r\nimport DefaultTodoData from \"./DefaultTodoData.json\";\r\n//\r\n// material-ui関連のインポート\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport {\r\n  ThemeProvider,\r\n  createMuiTheme,\r\n  makeStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { lightBlue, pink } from \"@material-ui/core/colors\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n// date-fnsのインポート\r\nimport { format } from \"date-fns\";\r\n\r\n// ////////////////////////////////////////////////////\r\n// material-uiの設定\r\n\r\nconst useStyles = makeStyles({\r\n  divider: {\r\n    marginBottom: \"16px\",\r\n  },\r\n});\r\n\r\n// ////////////////////////////////////////////////////\r\n// Context作成\r\nexport const TodoSavedContext = createContext(); // Todoデータ本体(複数のtodo)\r\nexport const TodoTmpContext = createContext(); // 新規入力および編集する確定前todoデータ(個別todo)\r\nexport const GlobalContext = createContext(); // 定数\r\n\r\n// ////////////////////////////////////////////////////\r\n// todoSavedState,todoSavedDispatchの設定 TodoSavedContextで渡す\r\n\r\nconst todoSavedInitialState = JSON.parse(localStorage.getItem(\"TodoData\"));\r\n// localStorage.getItem(\"TodoData\") || []; //データが無い場合は空の配列を返す\r\n\r\nlet newTodoSavedState = [];\r\nconst todoSavedReducer = (todoSavedState, todoSavedAction) => {\r\n  switch (todoSavedAction.type) {\r\n    case \"addUpdate\":\r\n      //  tmpIdの有無で新規追加か更新かを分岐\r\n      if (todoSavedAction.payload.tmpId === null) {\r\n        // 新規idは最大値+1\r\n        const newId =\r\n          todoSavedState.length === 0\r\n            ? 1\r\n            : Math.max(...todoSavedState.map((todo) => todo.id)) + 1;\r\n        newTodoSavedState = [\r\n          ...todoSavedState,\r\n          {\r\n            id: newId,\r\n            todoText: todoSavedAction.payload.tmpTodoText,\r\n            todoDetail: todoSavedAction.payload.tmpTodoDetail,\r\n            deadline: todoSavedAction.payload.tmpDeadline,\r\n            importanceIndex: todoSavedAction.payload.tmpImportanceIndex,\r\n            progressIndex: todoSavedAction.payload.tmpProgressIndex,\r\n            createdDate: todoSavedAction.payload.tmpCreatedDate,\r\n            updateDate: todoSavedAction.payload.tmpUpdateDate,\r\n            completeDate: todoSavedAction.payload.tmpCompleteDate,\r\n          },\r\n        ];\r\n      } else {\r\n        const updateTodo = {\r\n          id: todoSavedAction.payload.tmpId,\r\n          todoText: todoSavedAction.payload.tmpTodoText,\r\n          todoDetail: todoSavedAction.payload.tmpTodoDetail,\r\n          deadline: todoSavedAction.payload.tmpDeadline,\r\n          importanceIndex: todoSavedAction.payload.tmpImportanceIndex,\r\n          progressIndex: todoSavedAction.payload.tmpProgressIndex,\r\n          createdDate: todoSavedAction.payload.tmpCreatedDate,\r\n          updateDate: format(new Date(), \"yyyy-MM-dd\"),\r\n          completeDate: todoSavedAction.payload.tmpCompleteDate,\r\n        };\r\n        const updateIndex = todoSavedState.findIndex(\r\n          (item) => item.id === todoSavedAction.payload.tmpId\r\n        );\r\n        newTodoSavedState = [...todoSavedState];\r\n        newTodoSavedState.splice(updateIndex, 1, updateTodo);\r\n      }\r\n      return newTodoSavedState;\r\n\r\n    case \"doneTodo\":\r\n      const doneIndex = todoSavedState.findIndex(\r\n        (item) => item.id === todoSavedAction.payload\r\n      );\r\n      newTodoSavedState = [...todoSavedState];\r\n      newTodoSavedState[doneIndex].progressIndex = 4;\r\n      newTodoSavedState[doneIndex].updateDate = format(\r\n        new Date(),\r\n        \"yyyy-MM-dd\"\r\n      );\r\n      newTodoSavedState[doneIndex].completeDate = format(\r\n        new Date(),\r\n        \"yyyy-MM-dd\"\r\n      );\r\n      console.log(JSON.stringify(newTodoSavedState));\r\n      return newTodoSavedState;\r\n\r\n    case \"restoreTodo\":\r\n      const restoreIndex = todoSavedState.findIndex(\r\n        (item) => item.id === todoSavedAction.payload\r\n      );\r\n      newTodoSavedState = [...todoSavedState];\r\n      newTodoSavedState[restoreIndex].progressIndex = 2;\r\n      newTodoSavedState[restoreIndex].updateDate = format(\r\n        new Date(),\r\n        \"yyyy-MM-dd\"\r\n      );\r\n      newTodoSavedState[restoreIndex].completeDate = null;\r\n      // console.log(newTodoSavedState);\r\n      return newTodoSavedState;\r\n\r\n    case \"deleteTodo\": // todoの削除\r\n      const deleteIndex = todoSavedState.findIndex(\r\n        (item) => item.id === todoSavedAction.payload\r\n      );\r\n      newTodoSavedState = [...todoSavedState];\r\n      newTodoSavedState.splice(deleteIndex, 1);\r\n      return newTodoSavedState;\r\n\r\n    case \"getDefault\":\r\n      newTodoSavedState = [];\r\n      newTodoSavedState = [...DefaultTodoData];\r\n      return newTodoSavedState;\r\n\r\n    case \"clear\":\r\n      return [];\r\n\r\n    case \"localDelete\":\r\n      // ローカルストレージクリアの際、データが無い場合の空配列作成を明示的に回避\r\n      return null;\r\n\r\n    default:\r\n      return todoSavedState;\r\n  }\r\n};\r\n\r\n// ////////////////////////////////////////////////////\r\n// todoTmpState,todoTmpDispatchの設定 TodoTmpContextで渡す\r\n\r\nconst today = new Date();\r\nconst todoTmpInitialState = {\r\n  tmpId: null,\r\n  tmpTodoText: \"\",\r\n  tmpTodoDetail: \"\",\r\n  tmpDeadline: format(today.setDate(today.getDate() + 3), \"yyyy-MM-dd\"), // 3日後\r\n  tmpImportanceIndex: 3,\r\n  tmpProgressIndex: 1,\r\n  tmpCreatedDate: format(new Date(), \"yyyy-MM-dd\"),\r\n  tmpUpdateDate: format(new Date(), \"yyyy-MM-dd\"),\r\n  tmpCompleteDate: null,\r\n  isModalOpen: false, // モーダルの表示・非表示を設定\r\n};\r\n\r\nconst todoTmpReducer = (todoTmpState, todoTmpAction) => {\r\n  // console.log(JSON.stringify(todoTmpAction.payload), null, 2);\r\n  switch (todoTmpAction.type) {\r\n    case \"new\": // payloadはメイン画面の新規Todo（未追加）データ\r\n      return (todoTmpState = {\r\n        ...todoTmpState,\r\n        isModalOpen: true,\r\n      });\r\n\r\n    case \"edit\": // payloadは編集したい個別todoデータ\r\n      return (todoTmpState = {\r\n        tmpId: todoTmpAction.payload.id,\r\n        tmpTodoText: todoTmpAction.payload.todoText,\r\n        tmpTodoDetail: todoTmpAction.payload.todoDetail,\r\n        tmpDeadline: todoTmpAction.payload.deadline,\r\n        tmpImportanceIndex: todoTmpAction.payload.importanceIndex,\r\n        tmpProgressIndex: todoTmpAction.payload.progressIndex,\r\n        tmpCreatedDate: todoTmpAction.payload.createdDate,\r\n        tmpUpdateDate: todoTmpAction.payload.updateDate,\r\n        isModalOpen: true,\r\n      });\r\n\r\n    case \"handleChange\":\r\n      const key = todoTmpAction.payload.key;\r\n      const value = todoTmpAction.payload.value;\r\n      return (todoTmpState = {\r\n        ...todoTmpState,\r\n        [key]: value,\r\n      });\r\n\r\n    case \"cancel\":\r\n      console.log(todoTmpInitialState);\r\n      return todoTmpState.tmpId === null\r\n        ? (todoTmpState = { ...todoTmpState, isModalOpen: false })\r\n        : (todoTmpState = todoTmpInitialState);\r\n\r\n    case \"reset\":\r\n      return todoTmpInitialState;\r\n\r\n    default:\r\n      return todoTmpState;\r\n  }\r\n};\r\n\r\n// ////////////////////////////////////////////////////\r\n// 定数を設定\r\n// 重要度selectボックスの項目\r\nconst selectImportanceElements = [\r\n  { index: 1, name: \"veryLaw\", text: \"1(低)\" },\r\n  { index: 2, name: \"law\", text: \"2\" },\r\n  { index: 3, name: \"common\", text: \"3（中）\" },\r\n  { index: 4, name: \"high\", text: \"4\" },\r\n  { index: 5, name: \"veryHigh\", text: \"5(高)\" },\r\n];\r\n\r\n// 重要度selectボックスの項目\r\nconst selectProgressElements = [\r\n  { index: 1, name: \"notStated\", text: \"未着手\" },\r\n  { index: 2, name: \"inProgress\", text: \"進行中\" },\r\n  { index: 3, name: \"waiting\", text: \"待機中\" },\r\n  { index: 4, name: \"done\", text: \"完了\" },\r\n];\r\n\r\n// ////////////////////////////////////////////////////\r\n// FUNCTION ///////////////////////////////////////////\r\nconst App = () => {\r\n  // material-uiのstyle読み込み\r\n  const classes = useStyles();\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // reducer関数の設定\r\n  const [todoSavedState, todoSavedDispatch] = useReducer(\r\n    todoSavedReducer,\r\n    todoSavedInitialState\r\n  );\r\n  const [todoTmpState, todoTmpDispatch] = useReducer(\r\n    todoTmpReducer,\r\n    todoTmpInitialState\r\n  );\r\n\r\n  // ダークモードの設定 headerのpropsで渡す\r\n  const [darkMode, setDarkMode] = useState(\r\n    localStorage.getItem(\"darkMode\") === \"on\" ? true : false\r\n  );\r\n\r\n  // 変数darkModeを利用するため、関数内に移動\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      primary: lightBlue,\r\n      secondary: { main: pink[300] },\r\n      warning: { main: \"#ff9800\" },\r\n\r\n      type: darkMode ? \"dark\" : \"light\",\r\n    },\r\n  });\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // localStorageのデータ管理\r\n  // 初回起動時\r\n  useEffect(() => {\r\n    if (typeof localStorage === \"undefined\") {\r\n      alert(\r\n        `このブラウザは、localStorageをサポートしていません！\\nlocalStorageが利用できる環境でご使用ください。`\r\n      );\r\n      return;\r\n    } else if (!localStorage.hasOwnProperty(\"TodoData\")) {\r\n      alert(\r\n        `保存されたTodoデータはありません。\\nデフォルトデータは画面右上の設定ボタンより取り込めます。`\r\n      );\r\n      return;\r\n    } else {\r\n      return;\r\n    }\r\n  }, []);\r\n\r\n  // todoSavedStateが更新された場合にローカルストレージを更新する。\r\n  // ただしtodoSavedStateがnullの場合はローカルストレージクリア。\r\n  useEffect(() => {\r\n    todoSavedState === null\r\n      ? localStorage.clear()\r\n      : localStorage.setItem(\"TodoData\", JSON.stringify(todoSavedState));\r\n  }, [todoSavedState]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"DefaultTodoData が変わったよ！\");\r\n  }, [DefaultTodoData]);\r\n  useEffect(() => {\r\n    console.log(\"newTodoSavedState が変わったよ！\");\r\n  }, [newTodoSavedState]);\r\n\r\n  // ////////////////////////////////////////////////////\r\n  // RETURN /////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <TodoSavedContext.Provider\r\n          value={{\r\n            todoSavedState,\r\n            todoSavedDispatch,\r\n          }}\r\n        >\r\n          <TodoTmpContext.Provider\r\n            value={{\r\n              todoTmpState,\r\n              todoTmpDispatch,\r\n            }}\r\n          >\r\n            <GlobalContext.Provider\r\n              value={{\r\n                selectImportanceElements,\r\n                selectProgressElements,\r\n              }}\r\n            >\r\n              <Header darkMode={darkMode} setDarkMode={setDarkMode} />\r\n              <Container maxWidth=\"xl\">\r\n                <TodoInput />\r\n                <Divider variant=\"middle\" className={classes.divider} />\r\n                <TodoLists />\r\n                {todoTmpState.isModalOpen === true && <TodoModal />}\r\n              </Container>\r\n            </GlobalContext.Provider>\r\n          </TodoTmpContext.Provider>\r\n        </TodoSavedContext.Provider>\r\n      </ThemeProvider>\r\n      {console.log(\"レンダー（App.jsx）\")}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}